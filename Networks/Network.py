# --------------------------------------------------------------------------------------------------
# ------------------------------ MODULE :: Base Neural-Network Module ------------------------------
# --------------------------------------------------------------------------------------------------
from safetensors.torch import save_file
from safetensors.torch import load_file

import torch.nn as nn
import torch

import contextlib


# --------------------------------------------------------------------------------------------------
# -------------------------------------- CLASS :: Base Module --------------------------------------
# --------------------------------------------------------------------------------------------------
class Network(nn.Module):

    # ------------------------------------------------------------------------------------------
    # ------------------------------- Constructor :: Constructor -------------------------------
    # ------------------------------------------------------------------------------------------
    def __init__(self, name: str) -> None:
        super().__init__()

        self.filename = f"Build/{name}.safetensors"


    # ------------------------------------------------------------------------------------------
    # --------------------------------- METHOD :: Load the Model -------------------------------
    # ------------------------------------------------------------------------------------------
    def load(self) -> 'Network':

        with contextlib.suppress(FileNotFoundError):
            self.load_state_dict(load_file(self.filename))

        return self


    # ------------------------------------------------------------------------------------------
    # --------------------------------- METHOD :: Save the Model -------------------------------
    # ------------------------------------------------------------------------------------------
    def save(self) -> None:
        return save_file(self.state_dict(), self.filename) or self


    # ----------------------------------------------------------------------------------------------
    # -------------------------------- METHOD :: Compute Loss Value --------------------------------
    # ----------------------------------------------------------------------------------------------
    def loss(self, *input: object) -> torch.Tensor:
        ...


    # ----------------------------------------------------------------------------------------------
    # -------------------------------- METHOD :: Forward Activation --------------------------------
    # ----------------------------------------------------------------------------------------------
    def forward(self, x: torch.Tensor) -> torch.Tensor:
        ...